{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar reinterpretComplex64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretComplex128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\nvar BOOLEAN = resolve( 'bool' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input strided arrays.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideY**: `z` stride length.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, 0 );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, 0 );\n\t\t} else if ( dtypeX === BOOLEAN ) {\n\t\t\tviewX = reinterpretBoolean( x, 0 );\n\t\t} else {\n\t\t\tviewX = x;\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, 0 );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, 0 );\n\t\t} else if ( dtypeY === BOOLEAN ) {\n\t\t\tviewY = reinterpretBoolean( y, 0 );\n\t\t} else {\n\t\t\tviewY = y;\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, 0 );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, 0 );\n\t\t} else if ( dtypeZ === BOOLEAN ) {\n\t\t\tviewZ = reinterpretBoolean( z, 0 );\n\t\t} else {\n\t\t\tviewZ = z;\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar reinterpretComplex64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretComplex128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar offsetView = require( '@stdlib/strided-base-offset-view' );\nvar minViewBufferIndex = require( '@stdlib/strided-base-min-view-buffer-index' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\nvar BOOLEAN = resolve( 'bool' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input strided arrays using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 0, 'generic', [ 3, 4 ], 1, 0, 'generic', [ 0, 0 ], 1, 0 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {NonNegativeInteger} offsetX - starting `x` index\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {NonNegativeInteger} offsetY - starting `y` index\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @param {NonNegativeInteger} offsetZ - starting `z` index\n\t* @throws {TypeError} fifth argument must be a nonnegative integer\n\t* @throws {TypeError} ninth argument must be a nonnegative integer\n\t* @throws {TypeError} thirteenth argument must be a nonnegative integer\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) { // eslint-disable-line max-params\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( 'invalid arguments. Unable to resolve a strided array function supporting the provided array argument data types.' );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetX ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First input array offset must be a nonnegative integer. Value: `%s`.', offsetX ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetY ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second input array offset must be a nonnegative integer. Value: `%s`.', offsetY ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetZ ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output array offset must be a nonnegative integer. Value: `%s`.', offsetZ ) );\n\t\t}\n\t\toffsetX = minViewBufferIndex( N, strideX, offsetX );\n\t\toffsetY = minViewBufferIndex( N, strideY, offsetY );\n\t\toffsetZ = minViewBufferIndex( N, strideZ, offsetZ );\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, offsetX );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, offsetX );\n\t\t} else if ( dtypeX === BOOLEAN ) {\n\t\t\tviewX = reinterpretBoolean( x, offsetX );\n\t\t} else {\n\t\t\tviewX = offsetView( x, offsetX );\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, offsetY );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, offsetY );\n\t\t} else if ( dtypeY === BOOLEAN ) {\n\t\t\tviewY = reinterpretBoolean( y, offsetY );\n\t\t} else {\n\t\t\tviewY = offsetView( y, offsetY );\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, offsetZ );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, offsetZ );\n\t\t} else if ( dtypeZ === BOOLEAN ) {\n\t\t\tviewZ = reinterpretBoolean( z, offsetZ );\n\t\t} else {\n\t\t\tviewZ = offsetView( z, offsetZ );\n\t\t}\n\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = dispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Dispatch to a native add-on applying a binary function to two input strided arrays.\n*\n* @module @stdlib/strided-base-binary-addon-dispatch\n*\n* @example\n* var dispatch = require( '@stdlib/strided-base-binary-addon-dispatch' );\n*\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isTypedArrayLike", "resolve", "reinterpretComplex64", "reinterpretComplex128", "reinterpretBoolean", "format", "COMPLEX64", "COMPLEX128", "BOOLEAN", "dispatch", "addon", "fallback", "dispatcher", "N", "dtypeX", "x", "strideX", "dtypeY", "y", "strideY", "dtypeZ", "z", "strideZ", "viewX", "viewY", "viewZ", "require_ndarray", "__commonJSMin", "exports", "module", "isFunction", "isTypedArrayLike", "isNonNegativeInteger", "resolve", "reinterpretComplex64", "reinterpretComplex128", "reinterpretBoolean", "offsetView", "minViewBufferIndex", "format", "COMPLEX64", "COMPLEX128", "BOOLEAN", "dispatch", "addon", "fallback", "dispatcher", "N", "dtypeX", "x", "strideX", "offsetX", "dtypeY", "y", "strideY", "offsetY", "dtypeZ", "z", "strideZ", "offsetZ", "viewX", "viewY", "viewZ", "setReadOnly", "main", "ndarray"]
}
