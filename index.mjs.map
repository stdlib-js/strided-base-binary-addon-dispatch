{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport resolve from '@stdlib/strided-base-dtype-resolve-enum';\nimport reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpretComplex128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\nvar BOOLEAN = resolve( 'bool' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input strided arrays.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideY**: `z` stride length.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( '1Md3c', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( '1Md2H', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( format('1Md1L') );\n\t\t}\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, 0 );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, 0 );\n\t\t} else if ( dtypeX === BOOLEAN ) {\n\t\t\tviewX = reinterpretBoolean( x, 0 );\n\t\t} else {\n\t\t\tviewX = x;\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, 0 );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, 0 );\n\t\t} else if ( dtypeY === BOOLEAN ) {\n\t\t\tviewY = reinterpretBoolean( y, 0 );\n\t\t} else {\n\t\t\tviewY = y;\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, 0 );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, 0 );\n\t\t} else if ( dtypeZ === BOOLEAN ) {\n\t\t\tviewZ = reinterpretBoolean( z, 0 );\n\t\t} else {\n\t\t\tviewZ = z;\n\t\t}\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport resolve from '@stdlib/strided-base-dtype-resolve-enum';\nimport reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpretComplex128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport offsetView from '@stdlib/strided-base-offset-view';\nimport minViewBufferIndex from '@stdlib/strided-base-min-view-buffer-index';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar COMPLEX64 = resolve( 'complex64' );\nvar COMPLEX128 = resolve( 'complex128' );\nvar BOOLEAN = resolve( 'bool' );\n\n\n// MAIN //\n\n/**\n* Returns a function which dispatches to a native add-on applying a binary function to two input strided arrays using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   The returned function has the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* -   The add-on function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type (enumeration constant).\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **dtypeY**: `y` data type (enumeration constant).\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **dtypeZ**: `z` data type (enumeration constant).\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*\n* -   The fallback function should have the following signature:\n*\n*     ```text\n*     f( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ )\n*     ```\n*\n*     where\n*\n*     -   **N**: number of indexed elements.\n*     -   **dtypeX**: `x` data type.\n*     -   **x**: input array.\n*     -   **strideX**: `x` stride length.\n*     -   **offsetX**: starting `x` index.\n*     -   **dtypeY**: `y` data type.\n*     -   **y**: input array.\n*     -   **strideY**: `y` stride length.\n*     -   **offsetY**: starting `y` index.\n*     -   **dtypeZ**: `z` data type.\n*     -   **z**: output array.\n*     -   **strideZ**: `z` stride length.\n*     -   **offsetZ**: starting `z` index.\n*\n* @param {Function} addon - add-on interface\n* @param {Function} fallback - fallback function\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a function\n* @returns {Function} dispatch function\n*\n* @example\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 0, 'generic', [ 3, 4 ], 1, 0, 'generic', [ 0, 0 ], 1, 0 );\n*/\nfunction dispatch( addon, fallback ) {\n\tif ( !isFunction( addon ) ) {\n\t\tthrow new TypeError( format( '1Md3c', addon ) );\n\t}\n\tif ( !isFunction( fallback ) ) {\n\t\tthrow new TypeError( format( '1Md2H', fallback ) );\n\t}\n\treturn dispatcher;\n\n\t/**\n\t* Dispatches to a native add-on.\n\t*\n\t* @private\n\t* @param {integer} N - number of indexed elements\n\t* @param {*} dtypeX - `x` data type\n\t* @param {Collection} x - input array\n\t* @param {integer} strideX - `x` stride length\n\t* @param {NonNegativeInteger} offsetX - starting `x` index\n\t* @param {*} dtypeY - `y` data type\n\t* @param {Collection} y - input array\n\t* @param {integer} strideY - `y` stride length\n\t* @param {NonNegativeInteger} offsetY - starting `y` index\n\t* @param {*} dtypeZ - `z` data type\n\t* @param {Collection} z - destination array\n\t* @param {integer} strideZ - `z` stride length\n\t* @param {NonNegativeInteger} offsetZ - starting `z` index\n\t* @throws {TypeError} fifth argument must be a nonnegative integer\n\t* @throws {TypeError} ninth argument must be a nonnegative integer\n\t* @throws {TypeError} thirteenth argument must be a nonnegative integer\n\t* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n\t* @returns {Collection} `z`\n\t*/\n\tfunction dispatcher( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ ) { // eslint-disable-line max-params\n\t\tvar viewX;\n\t\tvar viewY;\n\t\tvar viewZ;\n\n\t\t// WARNING: we assume that, if we're provided something resembling a typed array, we're provided a typed array; however, this can lead to potential unintended errors as the native add-on may not work with non-typed array objects (e.g., generic arrays)...\n\t\tif (\n\t\t\t!isTypedArrayLike( x ) ||\n\t\t\t!isTypedArrayLike( y ) ||\n\t\t\t!isTypedArrayLike( z )\n\t\t) {\n\t\t\tfallback( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY, dtypeZ, z, strideZ, offsetZ );\n\t\t\treturn z;\n\t\t}\n\t\tdtypeX = resolve( dtypeX );\n\t\tdtypeY = resolve( dtypeY );\n\t\tdtypeZ = resolve( dtypeZ );\n\t\tif ( dtypeX === null || dtypeY === null || dtypeZ === null ) {\n\t\t\tthrow new TypeError( format('1Md1L') );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetX ) ) {\n\t\t\tthrow new TypeError( format( '1MdAC', offsetX ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetY ) ) {\n\t\t\tthrow new TypeError( format( '1MdAD', offsetY ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( offsetZ ) ) {\n\t\t\tthrow new TypeError( format( '1MdAE', offsetZ ) );\n\t\t}\n\t\toffsetX = minViewBufferIndex( N, strideX, offsetX );\n\t\toffsetY = minViewBufferIndex( N, strideY, offsetY );\n\t\toffsetZ = minViewBufferIndex( N, strideZ, offsetZ );\n\t\tif ( dtypeX === COMPLEX64 ) {\n\t\t\tviewX = reinterpretComplex64( x, offsetX );\n\t\t} else if ( dtypeX === COMPLEX128 ) {\n\t\t\tviewX = reinterpretComplex128( x, offsetX );\n\t\t} else if ( dtypeX === BOOLEAN ) {\n\t\t\tviewX = reinterpretBoolean( x, offsetX );\n\t\t} else {\n\t\t\tviewX = offsetView( x, offsetX );\n\t\t}\n\t\tif ( dtypeY === COMPLEX64 ) {\n\t\t\tviewY = reinterpretComplex64( y, offsetY );\n\t\t} else if ( dtypeY === COMPLEX128 ) {\n\t\t\tviewY = reinterpretComplex128( y, offsetY );\n\t\t} else if ( dtypeY === BOOLEAN ) {\n\t\t\tviewY = reinterpretBoolean( y, offsetY );\n\t\t} else {\n\t\t\tviewY = offsetView( y, offsetY );\n\t\t}\n\t\tif ( dtypeZ === COMPLEX64 ) {\n\t\t\tviewZ = reinterpretComplex64( z, offsetZ );\n\t\t} else if ( dtypeZ === COMPLEX128 ) {\n\t\t\tviewZ = reinterpretComplex128( z, offsetZ );\n\t\t} else if ( dtypeZ === BOOLEAN ) {\n\t\t\tviewZ = reinterpretBoolean( z, offsetZ );\n\t\t} else {\n\t\t\tviewZ = offsetView( z, offsetZ );\n\t\t}\n\n\t\taddon( N, dtypeX, viewX, strideX, dtypeY, viewY, strideY, dtypeZ, viewZ, strideZ );\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default dispatch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Dispatch to a native add-on applying a binary function to two input strided arrays.\n*\n* @module @stdlib/strided-base-binary-addon-dispatch\n*\n* @example\n* import dispatch from '@stdlib/strided-base-binary-addon-dispatch';\n*\n* function addon( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Call into native add-on...\n* }\n*\n* function fallback( N, dtypeX, x, strideX, dtypeY, y, strideY, dtypeZ, z, strideZ ) {\n*     // Fallback JavaScript implementation...\n* }\n*\n* // Create a dispatch function:\n* var f = dispatch( addon, fallback );\n*\n* // ...\n*\n* // Invoke the dispatch function with strided array arguments:\n* f( 2, 'generic', [ 1, 2 ], 1, 'generic', [ 3, 4 ], 1, 'generic', [ 0, 0 ], 1 );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["COMPLEX64","resolve","COMPLEX128","BOOLEAN","dispatch","addon","fallback","isFunction","TypeError","format","N","dtypeX","x","strideX","dtypeY","y","strideY","dtypeZ","z","strideZ","viewX","viewY","viewZ","isTypedArrayLike","reinterpretComplex64","reinterpretComplex128","reinterpretBoolean","offsetX","offsetY","offsetZ","isNonNegativeInteger","minViewBufferIndex","offsetView","setReadOnly","main","ndarray"],"mappings":"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"}